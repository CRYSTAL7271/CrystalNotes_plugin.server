from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
from customtkinter import *
from PIL import Image
import requests
import os
import sys
import time
global version
version = "1.0\n"
# program
class Window:
    def __init__(self, start):
        url = "https://csnotes-plugins.netlify.app/version.txt"
        ext = ".nc"
        try:
        	response = requests.get(url)
        	responset = response.text
        	if responset == version:
        		pass
        	else:
        		messagebox.showinfo(title="Update Notifier", message="Your CrystalNotes program is not updated.\nGo in the website: https://csnotes-mainwebsite.netlify.app")
        except:
        	pass
        def quit_program():
        	sys.exit(0)
        def New():
        	if messagebox.askyesno(title="Choice", message="Are you sure?")==True:
        		saved = False
        		text.delete(1.0, END)
        	else:
        		pass
        def Save():
        	file_s = filedialog.asksaveasfile(defaultextension='.txt',
        	filetypes=[
        	('Text File', '.txt'),
        	("Python File", '.py'),
        	("C, C++ File", ".c"),
        	("XML Data File", ".xml"),
        	("Json Data File", ".json"),
        	("Website Language File", ".html"),
        	("Website Style Language File", ".css"),
        	("Javascript File", ".js"),
        	("Java File", ".java"),
        	("All Files", ".*")
        	])
        	try:
        		text_boxt = text.get(1.0,END)
        		file_s.write(str(text_boxt))
        		file_s.close()
        	except:
        		messagebox.showerror(title="Error in Saving File.", message="File not saved or access refused.")
        def Open():
        	try:
        		o_f=filedialog.askopenfilename()
        		file = open(o_f, 'r')
        		text_file = file.read()
        		text.delete(1.0, END)
        		text.insert(INSERT, text_file)
        	except:
        		pass
        def Ver():
        	ns1 = CTk()
        	ns1.geometry("480x240")
        	ns1.title("CrystalNotes Versions")
        	
        	CTkLabel(ns1,text="All informations:", font=("Arial", 24)).pack()
        	CTkLabel(ns1, text="Ver: 1.0.0\nMade with: PyDroid3, python, customtkinter\nprogrammed: CrystalStudios\n Project Started: 27 april 2024", font=("Arial", 24)).pack()
        	
        	ns1.mainloop()
        def Settings():
        	def ch_fsz():
        		fzn = opentry.get()
        		if os.path.exists("data")==True:
        			os.chdir("data")
        			f=open("text_size.txt", "w")
        			f.write(str(fzn))
        			f.close()
        		else:
        			pass
        		text.configure(font=("Arial", float(fzn)))
        		os.chdir("..")
        		messagebox.showinfo(message="Font size set successfuly.", title="Process Completed.")
        	def setdark():
        		os.chdir("data")
        		f=open("bg_color.txt", "w")
        		f.write("dark")
        		f.close()
        		messagebox.showinfo(title="Option Information", message="This option will quit the program, re-open the program after it closes.")
        		quit_program()
        	def setlight():
        		os.chdir("data")
        		f=open("bg_color.txt", "w")
        		f.write("light")
        		f.close()
        		messagebox.showinfo(title="Option Information", message="This option will quit the program, re-open the program after it closes.")
        		quit_program()      		
        	s=CTk()
        	s.geometry("480x480")
        	s.title("CrystalNotes - Settings")
        	CTkLabel(s,text="Font Size").pack(pady=2)
        	global optionsn
        	optionsn = StringVar()
        	opentry=CTkEntry(s, textvariable = optionsn)
        	opentry.pack(pady=2)
        	
        	fsbtn=CTkButton(s, text="Submit Option", command=ch_fsz)
        	fsbtn.pack(pady=2)
        	CTkLabel(s, text="BG color").pack(pady=2)
        	CTkLabel(s, text="____________").pack()
        	chdbtn = CTkButton(s, text="Set Dark BG", command=setdark)
        	chdbtn.pack(pady=2)
        	chlbtn = CTkButton(s, text="Set Light BG", command=setlight)
        	chlbtn.pack(pady=2)
        	s.mainloop()
        if start == False:
            os.chdir("data")
            if os.path.exists("bg_color.txt")==True:
            	f=open("bg_color.txt", "r")
            	global color
            	color=f.read()
            	f.close()
            else:
            	f=open("bg_color.txt", "w")
            	f.write("dark")
            	f.close()
            	color="dark"
            set_appearance_mode(color)
            if color == "dark":
            	set_default_color_theme("green")
            else:
            	set_default_color_theme("blue")
            self.screen = CTk()
            self.screen.title("CrystalNotes")
            self.screen.geometry("1000x620")
            # frame for all buttons
            os.chdir("..")
            settings = PhotoImage(file="img/settings.png")
            op_frame = CTkScrollableFrame(self.screen, width=80, height=580)
            op_frame.grid()
            nbutton = CTkButton(op_frame, text="New..", command=New)
            nbutton.pack(pady=2)
            sbutton = CTkButton(op_frame, text="Save", command=Save)
            sbutton.pack(pady=2)
            obutton = CTkButton(op_frame, text="Open", command=Open)
            obutton.pack(pady=2)
            vbutton = CTkButton(op_frame, text="Ver.", command=Ver)
            vbutton.pack(pady=2)
            ebutton = CTkButton(op_frame, text="Exit", command=quit_program)
            ebutton.pack(pady=50)
            sebutton = CTkButton(op_frame, image=settings, text="", command=Settings)
            sebutton.pack(pady=2)
            os.chdir("data")
            if os.path.exists("text_size.txt")==True:
            	f=open("text_size.txt", "r")
            	global options
            	options=int(f.read())
            	f.close()
            else:
            	f=open("text_size.txt", "w")
            	f.write("24")
            	f.close()
            	options=24
            global text
            text = CTkTextbox(self.screen, width=880, height=580, font=("Arial", options))
            text.place(x=100, y=10)
            os.chdir("..")
            self.screen.mainloop()
        else:
            pass

if __name__ == "__main__":
    Window(False)
